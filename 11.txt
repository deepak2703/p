1)LOCAL OPTIMIZATION a)COPY PROPAGATION #include <stdio.h> #include<string.h>
int main(void) {
char a[10],b[10];
int j;
scanf("%s",a); scanf("%s",b); for(j=0;b[j]!='\0';j++) {
if(b[j]==a[0]) b[j]=a[2];
}
printf("after copy propogation\n"); puts(a);
puts(b);
}
INPUT:
OUTPUT:
x=y a=x+2
 after copy propogation
x=y
a=y+2
b)CONSTANT FOLDING:
#include <stdio.h>
int main(void) {
char a[10],ch,b[10],op;
int i,k,sum=0,x=0; printf("enter expression\n"); scanf("%s",a); for(i=0;a[i]!='\0';i++)
{
ch=a[i]; if((ch>='a'&&ch<='z')||ch=='+'||ch=='*'||ch=='=') {
b[x]=ch;
x++; }
else break;
}
int j=i;
while(a[j]!='\0') {
op=a[j]; if((op>='a'&&op<='z')||op=='+'||op=='*') goto s;
else
{
k=op-'0';
sum+=k; }
op=sum+'0'; b[x]=op; s:j++;
}
printf("after constant folding\n");
puts(b); return 0;
}
INPUT:
enter expression
a=x+2+5

OUTPUT:
regarding this don’t give big numbers such as sum exceeds 9 .Give small numbers as input
2)LOOP OPTIMIZATION
a)LOOP UNROLLING
#include<stdio.h> #include<string.h> void main()
{
char a[10][30];
int i=0,k=0,c=0,j,n;
printf("enter number of lines in code\n");
scanf("%d",&n);
n+=1;
printf("enter code\n");
while(i<n) {
gets(a[i]); i++;
c++;
}
printf("after loop unrolling\n");
puts(a[1]); printf("\n"); puts(a[2]); printf("\n");
while(k<2)
{ for(j=3;j<c-1;j++) {
puts(a[j]); printf("\n"); }
k++;
} puts(a[n-1]); }
INPUT:
after constant folding
a=x+7
enter number of lines in code
5
enter code
for(i=0;i<n;i++)
{
a[k]=p;
k++; }

OUTPUT:
after loop unrolling
for(i=0;i<n;i++)
{ a[k]=p;
k++; a[k]=p;
k++; }
b)REDUCTION IN STRENGTH
#include <stdio.h> #include<string.h> int main(void) {
char a[10];
int i; scanf("%s",a);
for(i=0;a[i]!='\0';i++) {
if(a[i]=='*') {
printf("%s",a);
printf(" is reduced in strength as\n"); printf("%c=%c+%c+%c....%c times",a[0],a[2],a[2],a[2],a[4]); printf("\n or \n");
printf("%c=%c+%c+%c....%c times",a[0],a[4],a[4],a[4],a[2]);
} }
return 0; }
INPUT:
a=x*y
OUTPUT: